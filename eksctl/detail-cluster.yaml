apiVersion: eksctl.io/v1alpha5
kind: ClusterConfig

metadata:
  name: cluster
  version: "1.27"
  region: ap-northeast-2
  tags:
    karpenter.sh/discovery: cluster

karpenter:
  version: 'v0.29.2' # Exact version must be provided
  createServiceAccount: true # default is false
  withSpotInterruptionQueue: true # adds all required policies and rules for supporting Spot Interruption Queue, default is false

# eksctl utils update-cluster-endpoints --name=wsi-api-cluster --private-access=true --public-access=false

vpc:
  id: vpc-010e57c0400e10abf
  subnets:
    private:
      private-a: { id: subnet-0cf8e74fced734ab1 }
      private-b: { id: subnet-00c0b576d44f7fff3 }
      private-c: { id: subnet-06742dd6777a3a597 }

cloudWatch:
  clusterLogging:
    enableTypes: ["*"]


iam:
  withOIDC: true
  serviceAccounts:
  #- metadata:
  #    name: appmesh-controller
  #    namespace: appmesh-system
  #  attachPolicyARNs:
  #    - "arn:aws:iam::aws:policy/AWSCloudMapFullAccess"
  #    - "arn:aws:iam::aws:policy/AWSAppMeshFullAccess"
  - metadata:
      name: aws-load-balancer-controller
      namespace: kube-system
    wellKnownPolicies:
      awsLoadBalancerController: true
  #- metadata:
  #    name: ebs-csi-controller-sa
  #    namespace: kube-system
  #  wellKnownPolicies:
  #    ebsCSIController: true
  #- metadata:
  #    name: efs-csi-controller-sa
  #    namespace: kube-system
  #  wellKnownPolicies:
  #    efsCSIController: true
  #- metadata:
  #    name: external-dns
  #    namespace: kube-system
  #  wellKnownPolicies:
  #    externalDNS: true
  #- metadata:
  #    name: cert-manager
  #    namespace: cert-manager
  #  wellKnownPolicies:
  #    certManager: true
  #- metadata:
  #    name: cluster-autoscaler
  #    namespace: kube-system
  #    labels: {aws-usage: "cluster-ops"}
  #  wellKnownPolicies:
  #    autoScaler: true
  #- metadata:
  #    name: build-service
  #    namespace: ci-cd
  #  wellKnownPolicies:
  #    imageBuilder: true
  #- metadata:
  #    name: autoscaler-service
  #    namespace: kube-system
  #  attachPolicy:
  #    Version: "2012-10-17"
  #    Statement:
  #    - Effect: Allow
  #      Action:
  #      - "autoscaling:DescribeAutoScalingGroups"
  #      - "autoscaling:DescribeAutoScalingInstances"
  #      - "autoscaling:DescribeLaunchConfigurations"
  #      - "autoscaling:DescribeTags"
  #      - "autoscaling:SetDesiredCapacity"
  #      - "autoscaling:TerminateInstanceInAutoScalingGroup"
  #      - "ec2:DescribeLaunchTemplateVersions"
  #      Resource: '*'

managedNodeGroups:
  - name: app-ng
    labels: { dedicated: app }
    instanceType: c5.large
    instanceName: app-ng
    desiredCapacity: 2
    amiFamily: Bottlerocket
    minSize: 2
    maxSize: 20
    privateNetworking: true
    volumeType: gp2
    volumeEncrypted: true
    subnets:
      - private-a
      - private-b
      - private-c
#    tags:
#      k8s.io/cluster-autoscaler/enabled: "true"
#      k8s.io/cluster-autoscaler/$cluster: "owned"
    iam:
      withAddonPolicies:
        imageBuilder: true
        #externalDNS: true
        #certManager: true
        cloudWatch: true
        albIngress: true
      attachPolicyARNs:
          - arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy
          - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly
          - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
          - arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy
    taints:
      - key: dedicated
        value: app
        effect: NoSchedule

  - name: addon-ng
    labels: { dedicated: addon }
    instanceType: c5.large
    instanceName: addon-ng
    desiredCapacity: 2
    amiFamily: Bottlerocket
    minSize: 2
    maxSize: 20
    privateNetworking: true
    volumeType: gp2
    volumeEncrypted: true
    subnets:
      - private-a
      - private-b
      - private-c
#    tags:
#      k8s.io/cluster-autoscaler/enabled: "true"
#      k8s.io/cluster-autoscaler/$cluster: "owned"
    iam:
      withAddonPolicies:
        imageBuilder: true
        #externalDNS: true
        #certManager: true
        cloudWatch: true
        albIngress: true
      attachPolicyARNs:
          - arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy
          - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly
          - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
          - arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy
